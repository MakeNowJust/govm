#!/usr/bin/env python

# Copyright (c) 2014 TSUYUSATO Kitsune
# This software is released under the MIT License.
# http://opensource.org/licenses/mit-license.php

import optparse
import os
import os.path
import shutil
import sys

# for windows
is_windows = False
which = 'which'
devnull = '/dev/null'
makesh = './make.bash'
if os.name == 'nt':
  is_windows = True
  which = 'where'
  devnull = 'nul'
  makesh = 'cmd /c make.bat'

class GoVM:
  # Directory structure:
  # $GOVM_ROOT
  #   govm        This script.
  #   repo        Place to store repository of Go.
  #   versions    Place to store binary and source Go.    
  #     current   Symbolic link for an install directory.
  #     ...

  version_str  = '0.4.0-dev'

  # entry point

  def main(self, args, cfg):
    self.cfg = cfg
    p = GoVMOptionParser(version = self.version_str)
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      left_args = ['help']
    subcmd_name = left_args[0]
    try:
      subcmd_func = getattr(self, 'cmd_%s' % subcmd_name)
    except AttributeError:
      die('Subcommand %s is not available.' % subcmd_name)
    subcmd_func(left_args)
    return

  # subcommands

  def cmd_help(self, args):
    '''Show help message to use GoVM.'''
    print 'Version: %s' % self.version_str
    print
    subcmd_names = [n for n in dir(self) if n.startswith('cmd_')]
    subcmd_names.sort()
    longest_name_len = max(len(n) for n in subcmd_names)
    print 'Available commands:'
    for n in subcmd_names:
      print '  %s%s%s' % (
        n[len('cmd_'):],
        ' ' * (longest_name_len - len(n) + 2),
        getattr(self, n).__doc__.split('\n')[0]
      )
    print
    print 'Examples:'
    print '  govm install go1.3             # install go1.3'
    print '  govm use go1.3                 # using go1.3 as default'
    print '  govm build go1.3 windows amd64 # build runtime for windows/amd64 cross compiling'
    print '  govm uninstall go1.3           # uninstall go1.3'
    return True

  def cmd_install(self, args):
    '''Install a specific version of Go.'''
    p = GoVMOptionParser(usage = '%prog install $version')
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) < 1:
      die('Please specify a version of Go to install.')
    version = left_args[0]
    go_dir = self.cfg.go_dir(version)
    root = self.cfg.root
    return (
      self.fetch()
      and self.checkout(version)
      and self.build_all(version)
      and self.link_govm(version)
    )

  def cmd_build(self, args):
    '''Build a specific version of Go runtime for cross compiling.'''
    p = GoVMOptionParser(usage = '%prog crossbuild $version $os $arch')
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) < 3:
      die('Please specify a version and a os name and a arch name of Go to build.')
    version = left_args[0]
    os = left_args[1]
    arch = left_args[2]
    if not isdir(self.cfg.go_dir(version)):
      die('Version %s of Go is not installed.' % version)
    return self.build_make(version, os, arch)

  def cmd_list(self, args):
    '''List currently installed versions of Go.'''
    gos_dir = self.cfg.gos_dir()
    if not isdir(gos_dir):
      die('Please setup directories for GoVM')
    current_version = self.cfg.current_version()
    for version in listdir(gos_dir):
      if isdir(self.cfg.go_dir(version)) and version != 'current':
        mark = '*' if version == current_version else ' '
        print mark, version
    return True

  def cmd_list_remote(self, args):
    '''List remote versions of Go.'''
    repo_dir = self.cfg.repo_dir()
    if not isdir(repo_dir):
      self.fetch()
    tags = os.popen('cd %s && hg tags' % repo_dir).read().split('\n')
    tags = [t for t in tags if t.startswith('go')]
    for t in tags:
      print t.split(' ')[0]
    return True


  def cmd_uninstall(self, args):
    '''Uninstall a specific version of Go.'''
    p = GoVMOptionParser(usage = '%prog uninstall $version')
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) < 1:
      die('Please specify a version of Go to uninstall.')
    version = left_args[0]
    current_dir = self.cfg.go_dir('current')
    go_dir = self.cfg.go_dir(version)
    if isdir(current_dir):
      dst_dir = readlink(current_dir)
      if normalize_path(dst_dir) == normalize_path(go_dir):
        die('%s can not be uninstalled. it is currently used.' % version)
    if isdir(go_dir):
      rm_r(go_dir)
    else:
      warn('%s is not found.' % version)
    return True

  def cmd_use(self, args):
    '''Use a specific version of Go as the default one.'''
    p = GoVMOptionParser(usage = '%prog use $version')
    (option, left_args) = p.parse_args(args[1:])
    if len(left_args) < 1:
      die('Please specify a version of Go to use.')
    version = left_args[0]
    if version == 'system':
      current_dir = self.cfg.go_dir('current')
      if is_dir(current_dir):
        if is_windows:
          rm_r('%s\\bin' % current_dir)
        else:
          rm(current_dir)
    else:
      go_dir = self.cfg.go_dir(version)
      if not isdir(go_dir):
        die('%s is not installed.' % version)
      current_dir = self.cfg.go_dir('current')
      if not is_windows and isdir(current_dir):
        rm(current_dir)
      self.link_current(version)
    return True

  def cmd_setup(self, args):
    '''Set up files and directories for GoVM'''
    root = self.cfg.root
    gos_dir = self.cfg.gos_dir()
    current_dir = self.cfg.go_dir('current')
    if isdir(root) and isdir(gos_dir) and isdir(current_dir):
      die('Files and directories for GoVM are already set up.')
    return (
      (has('git') or die('Git is required'))
      and (
        isdir(root)
        or sh('git clone %s %s' %
          (self.cfg.govm_repo_url(), root))
        or die()
      )
      and (isdir(gos_dir) or mkdir(gos_dir))
      and (isdir(current_dir) or self.link_govm('current'))
      and echo('\n'.join((
        '',
        'GoVM is successfully installed. For daily use,',
        'please add the following line into your ~/.bashrc etc:',
        '',
        'export GOVM_ROOT=%s' % root,
        'export GOROOT=$GOVM_ROOT/versions/current',
        'export PATH=$GOROOT/bin:$PATH',
      )))
    )

  def cmd_self_update(self, args):
    '''Update GoVM itself.'''
    root = self.cfg.root
    return (
      (has('git') or die('Git is required'))
      and (
        isdir(root)
        or die('GoVM is not installed. Please set up at the first.')
      )
      and (
        sh('cd %s && git pull' % root)
      )
      and (
        is_windows and self.update_govm()
      )
      and echo ('\n'.join((
        '',
        'GoVM is successfully updated.',
      )))
    )


  # utilities

  def fetch(self):
    repo_url = self.cfg.repo_url()
    repo_dir = self.cfg.repo_dir()
    return (
      (has('hg') or die('Mercurial is required.'))
      and (
        isdir(repo_dir)
        or sh('hg clone %s %s' % (repo_url, repo_dir))
        or die()
      )
      and (sh('cd %s && hg pull' % repo_dir) or die())
    )

  def checkout(self, version):
    repo_dir = self.cfg.repo_dir()
    gos_dir = self.cfg.gos_dir()
    go_dir = self.cfg.go_dir(version)
    return (
      (has('hg') or die('Mercurial is required.'))
      and (isdir(gos_dir) or mkdir(gos_dir))
      and (
        isdir(go_dir)
        or sh('cd %s && hg archive -t tar -r %s -p %s - | (cd %s && tar xf -)'
          % (repo_dir, version, version, gos_dir))
        or die()
      )
    )

  def build_all(self, version):
    go_dir = self.cfg.go_dir(version)
    self.cfg.env['GOROOT'] = ''
    return (
      isdir(go_dir)
      and sh('cd %s/src && %s' % (go_dir, makesh))
    )

  def build_make(self, version, os, arch):
    go_dir = self.cfg.go_dir(version)
    self.cfg.env['GOROOT'] = ''
    return (
      isdir(go_dir)
      and sh('cd %s/src && GOOS=%s GOARCH=%s %s' %
        (go_dir, os, arch, makesh))
    )

  def link_govm(self, version):
    go_bin_dir = '%s/bin' % self.cfg.go_dir(version)
    if not isdir(go_bin_dir):
      mkdir(go_bin_dir)
    if is_windows:
      bin_root = '%s\\bin' % self.cfg.root
      for b in listdir(bin_root):
        cp('%s/%s' % (bin_root, b), go_bin_dir)
    else:
      root = self.cfg.root
      ln_s('%s/bin/govm' % root, '%s/govm' % go_dir_bin)
    return True

  def link_current(self, version = None):
    if version:
      go_dir = self.cfg.go_dir(version)
    else:
      go_dir = self.cfg.root
    if is_windows:
      current_dir = self.cfg.go_dir('current')
      if not isdir(current_dir):
        mkdir(current_dir)
      current_bin_dir = '%s\\bin' % current_dir
      if isdir(current_bin_dir):
        rm_r(current_bin_dir) or die()
      mkdir(current_bin_dir)
      go_bin_dir = '%s\\bin' % go_dir
      for b in listdir(go_bin_dir):
        if not isdir(b) and b != 'govm' and b != 'govm.bat':
          with open('%s/%s.bat' % (current_bin_dir, '.'.join(b.split('.')[0:-1])), 'w') as f:
            f.write('\n'.join((
              '@echo off',
              'set GOROOT=%s' % go_dir,
              '%s\\%s %%*' % (go_bin_dir, b),
            )))
      self.link_govm('current')
      if version:
        with open('%s/version.txt' % current_dir, 'w') as f:
          f.write(version)
    else:
      ln_s(go_dir, self.cfg.go_dir('current'))
    return True

  def update_govm(self):
    bin_root = '%s\\bin' % self.cfg.root
    gos_dir = self.cfg.gos_dir()
    for d in listdir(gos_dir):
      if isdir('%s\\%s\\bin' % (gos_dir, d)):
        for b in listdir(bin_root):
          if not isdir('%s\\%s' % (bin_root, b)):
            cp('%s\\%s' % (bin_root, b),
              '%s\\%s\\bin' % (gos_dir, d))
    return True

class GoVMOptionParser(optparse.OptionParser):
  def __init__(self, *args, **kw):
    optparse.OptionParser.__init__(self, *args, **kw)
    self.disable_interspersed_args()
    return

  def parse_args(self, args):
    return optparse.OptionParser.parse_args(self, list(args))

class GoVMConfig:
  root_var_name = 'GOVM_ROOT'
  repo_var_name = 'GOVM_REPO_URL'
  govm_repo_var_name = 'GOVM_SELF_REPO_URL'

  def __init__(self, env):
    self.env = env
    self.root = env.get(self.root_var_name, '~/.govm')
    self.repo = env.get(self.repo_var_name, 'https://code.google.com/p/go')
    self.govm_repo = env.get(self.govm_repo_var_name, 'https://github.com/MakeNowJust/govm.git')

  def gos_dir(self):
    return '%s/versions' % self.root

  def go_dir(self, version):
    return '%s/%s' % (self.gos_dir(), version)

  def repo_dir(self):
    return '%s/repo' % self.root

  def current_version(self):
    if is_windows:
      try:
        f = open('%s/version.txt' % self.go_dir('current'), 'r')
        version = f.read()
        f.close()
        return version.strip()
      except:
        return None
    else:
      try:
        version = os.path.basename(readlink(self.go_dir('current')))
        return version
      except:
        return None

  def repo_url(self):
    return self.repo

  def govm_repo_url(self):
    return self.govm_repo


# shell like functions

def echo(msg):
  print msg
  return True

def die(msg = ''):
  return exit(msg)

def warn(msg):
  sys.stderr.write("%s\n" % msg)
  return True

def sh(cmd):
  print 'govm> %s' % cmd
  return os.system(cmd) == 0

def has(prog):
  return os.system('%s %s >%s 2>%s' % (which, prog, devnull, devnull)) == 0

def expand(path):
  return os.path.expanduser(path)

def isdir(path):
  return os.path.isdir(expand(path))

def listdir(path):
  return os.listdir(expand(path))

def ln_s(src, dst):
  os.symlink(expand(src), expand(dst))
  return True

def mkdir(path):
  os.makedirs(expand(path), 0755)
  return True

def normalize_path(path):
  return os.path.abspath(expand(path))

def readlink(path):
  return os.readlink(expand(path))

def rm(path):
  os.remove(expand(path))
  return True

def rm_r(path):
  shutil.rmtree(expand(path))
  return True

def cp(src, dst):
  shutil.copy(expand(src), expand(dst))
  return True


# main

if __name__ == '__main__':
  GoVM().main(sys.argv, GoVMConfig(os.environ))
